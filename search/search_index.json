{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>Qt-TreeSitterHighlighter is a tree-sitter based syntax highlighter library for Qt. It can be used with any QTextDocument, in particular with QTextEdit and QPlainTextEdit, and rehighlights the source code immediately whenever it changes, e.g. when typing.</p> <p>To use Qt-TreeSitterHighlighter, it must be provided with:</p> <ul> <li>A tree-sitter language to parse the source and construct a syntax tree.</li> <li>A tree-sitter highlighting query string which extracts the relevant captures from the syntax tree.</li> <li>A highlighting format map which maps capture names to their desired QTextCharFormat format.</li> </ul> <p>The highlighter performs the following steps:</p> <ol> <li>The QTextDocuments text is parsed to create a syntax tree.</li> <li>The highlighting query is applied to the syntax tree to extract highlighting captures.</li> <li>The text of each capture is highlighted according to its format specified in the format map.</li> </ol> <p>When the QTextDocuments text is updated, e.g. by typing, the steps above are applied incrementally.</p>"},{"location":"Tutorial/","title":"Tutorial","text":"<p>The completed example code for this tutorial can be found in the git repository.</p> <p>To use TreeSitterHighlighter, you need to provide three pieces of information:</p> <ul> <li>The language you would like to parse in form of a tree-sitter language.</li> <li>A highlight query which extracts the nodes to highlight from the syntax tree of your source file.</li> <li>A format map that maps highlight query capture names to their highlighting format.</li> </ul> <p>Let's start with the language. In most cases one will be able to make use of one of the available tree-sitter parsers. For this tutorial, let's use tree-sitter-cpp. To make use of it in our example we declare the <code>tree_sitter_cpp</code> function it provides and to which we will link later:</p> <pre><code>// Declare the 'tree_sitter_cpp' function provided by the 'tree-sitter-cpp' parser library.\nextern \"C\" {\nconst TSLanguage* tree_sitter_cpp(void);\n}\n</code></pre> <p>Next up is the highlighting query. Many parsers come with a query in their repository (usually under <code>queries/highlights.scm</code>) which provides a good starting point. For this tutorial we will use a custom (minimal) query:</p> <pre><code>// A minimal highlights query for C++\n// See https://tree-sitter.github.io/tree-sitter/using-parsers/queries/1-syntax.html for query syntax.\nstd::string query = R\"(\n[\"extern\" \"catch\" \"class\" \"delete\" \"namespace\" \"new\" \"private\" \"protected\" \"public\"\n \"throw\" \"try\" \"requires\" \"virtual\" \"break\" \"case\" \"const\" \"continue\" \"do\" \"else\"\n \"enum\" \"for\" \"if\"  \"inline\" \"return\" \"static\" \"struct\" \"switch\" \"typedef\" \"while\" ] @keyword\n\n[\"#define\" \"#elif\" \"#else\" \"#endif\" \"#if\" \"#ifdef\" \"#ifndef\" \"#include\" ] @preproc\n(preproc_directive) @preproc\n\n(number_literal) @number\n\n(true) @bool\n(false) @bool\n\n(string_literal) @string.std\n(raw_string_literal) @string.raw\n\n(type_identifier) @type\n(primitive_type) @type\n(sized_type_specifier) @type\n\n(field_identifier) @variable\n(identifier) @variable\n\n(call_expression\n    function: (identifier) @function)\n(call_expression\n    function: (field_expression\n    field: (field_identifier) @function))\n(function_declarator\n    declarator: (identifier) @function)\n\n(comment) @comment\n)\";\n</code></pre> <p>Most statements in this query simply match a syntax tree node and assign it a capture name, e.g:  <code>(tree_node) @capture_name</code>. For information on how to write a highlighting query, please refer to the tree-sitter documentation.</p> <p>Finally, we need to specify how these captures are highlighted. For this, we define a map from (some of) the <code>capture_names</code> above to a QTextCharFormat with which the capture should be highlighted. In this example we again use a minimal map: <pre><code>// A format map from capture names to the appropriate QTextCharFormat format\nFormatMap format_map() {\n    FormatMap map;\n\n    map[\"\"].setForeground(QColor(\"black\"));\n    map[\"keyword\"].setForeground(QColor(\"#b055cc\"));\n    map[\"preproc\"].setForeground(QColor(\"purple\"));\n    map[\"number\"].setFontUnderline(true);\n    map[\"bool\"].setFontWeight(QFont::Bold);\n    map[\"string\"].setForeground(QColor(\"green\"));\n    map[\"string.raw\"].setForeground(QColor(\"dark green\"));\n    map[\"type\"].setForeground(QColor(\"#c08000\"));\n    map[\"variable\"].setForeground(QColor(\"#ad1d4d\"));\n    map[\"function\"].setForeground(QColor(\"blue\"));\n    map[\"comment\"].setForeground(QColor(\"gray\"));\n    map[\"comment\"].setFontItalic(true);\n\n    return map;\n}\n</code></pre></p> <p>To use TreeSitterHighlighter we first create a QPlainTextEdit instance to which it will be connected:</p> <pre><code>    QPlainTextEdit* editor = new QPlainTextEdit();\n</code></pre> <p>Now we create a TreeSitterHighlighter instance using the three ingredients prepared above and connect it do the editor's document:</p> <pre><code>    TreeSitterHighlighter* highlighter = new TreeSitterHighlighter(tree_sitter_cpp(), query, format_map(), editor-&gt;document());\n</code></pre> <p>That's it, TreeSitterHighlighter will now automatically rehighlight every time the editor's text changes.</p> <p>The complete example can be obtained, built and run as follows:</p> <pre><code>git clone https://github.com/Bzero/Qt-TreeSitterHighlighter --recurse-submodules\ncd Qt-TreeSitterHighlighter\ncmake . -B build\ncmake --build build\n./build/tree-sitter-highlighter-example\n</code></pre>"},{"location":"reference/","title":"Qt-TreeSitterHighlighter","text":"<p>A tree-sitter syntax highlighter for Qt.</p>"},{"location":"reference/#types","title":"Types","text":"Name Description TreeSitterHighlighter TreeSitterHighlighter is a syntax highlighter for QTextDocument based on tree-sitter."},{"location":"reference/#type-aliases","title":"Type Aliases","text":"Name Description BlockRange Represents a range(inclusive) of QTextBlocks in a document. FormatMap A mapping of capture names to their syntax highlighting formats."},{"location":"reference/#type-alias-details","title":"Type Alias Details","text":""},{"location":"reference/#blockrange","title":"BlockRange","text":"<p>typedef std::pair&lt;int, int&gt; BlockRange</p> <p>Represents a range(inclusive) of QTextBlocks in a document.</p>"},{"location":"reference/#formatmap","title":"FormatMap","text":"<p>typedef std::map&lt;std::string, QTextCharFormat&gt; FormatMap</p> <p>A mapping of capture names to their syntax highlighting formats.</p>"},{"location":"reference/TreeSitterHighlighter/","title":"TreeSitterHighlighter","text":"<p>class TreeSitterHighlighter: public QObject</p> <p>TreeSitterHighlighter is a syntax highlighter for QTextDocument based on tree-sitter.</p> <p>For functional highlighting it must be provided with the following:</p> <ul> <li>A tree-sitter language to parse the source and construct a syntax tree.</li> <li>A tree-sitter highlighting query string which extracts the relevant captures from the syntax tree.</li> <li>A highlighting format map which maps capture names to their desired QTextCharFormat format.</li> </ul> <p>The highlighter can be applied to any QTextDocument, in particular to the documents of QPlainTextEdit and QTextEdit and will rehighlight the document whenever it changes.</p>"},{"location":"reference/TreeSitterHighlighter/#variables","title":"Variables","text":"Name Description language The highlighters language. parser The highlighters parser. tree The current syntax tree of the document. query The highlight query. format_map The highlight format map. document The document to which the highlighter is connected to."},{"location":"reference/TreeSitterHighlighter/#functions","title":"Functions","text":"Name Description TreeSitterHighlighter Constructor. TreeSitterHighlighter Constructor. ~TreeSitterHighlighter Destructor. set_document Connects the syntax highlighter to the given QTextDocument. get_document Return the QTextDocument to which this syntax highlighter is connected. set_query Set the query from a query pattern string to use for syntax highlighting. set_format_map Set the format map. get_format_map Return the highlighters format map. reparse Reparse the whole document. rehighlight Apply syntax highlighting to the whole document. clear Clear the highlighting of the whole document."},{"location":"reference/TreeSitterHighlighter/#variable-details","title":"Variable Details","text":""},{"location":"reference/TreeSitterHighlighter/#language","title":"language","text":"<p>const TSLanguage* language</p> <pre><code>The highlighters language.\n</code></pre>"},{"location":"reference/TreeSitterHighlighter/#parser","title":"parser","text":"<p>TSParser* parser</p> <pre><code>The highlighters parser.\n</code></pre>"},{"location":"reference/TreeSitterHighlighter/#tree","title":"tree","text":"<p>TSTree* tree</p> <pre><code>The current syntax tree of the document.\n</code></pre>"},{"location":"reference/TreeSitterHighlighter/#query","title":"query","text":"<p>TSQuery* query</p> <pre><code>The highlight query.\n</code></pre>"},{"location":"reference/TreeSitterHighlighter/#format_map","title":"format_map","text":"<p>FormatMap format_map</p> <pre><code>The highlight format map.\n</code></pre>"},{"location":"reference/TreeSitterHighlighter/#document","title":"document","text":"<p>QPointer&lt;QTextDocument&gt; document</p> <pre><code>The document to which the highlighter is connected to.\n</code></pre>"},{"location":"reference/TreeSitterHighlighter/#function-details","title":"Function Details","text":""},{"location":"reference/TreeSitterHighlighter/#treesitterhighlighter_1","title":"TreeSitterHighlighter","text":"<p>TreeSitterHighlighter(const TSLanguage* language, QTextDocument* document)</p> <p>Constructor. Constructs a minimal TreeSitterHighlighter.</p> <code>language</code> A tree-sitter language. <code>document</code> A QTextDocument to which the highlighter will be connected and which becomes its parent. <p>TreeSitterHighlighter(const TSLanguage* language, std::string query_str, FormatMap format_map, QTextDocument* document)</p> <pre><code>Constructor. Constructs a fully functional TreeSitterHighlighter and connects it to document.\n</code></pre> <code>language</code> A tree-sitter language. <code>query_string</code> A tree-sitter highlighting query string. <code>format_map</code> A map of query capture names to their QTextCharFormat format. <code>document</code> A QTextDocument document to which the highlighter will be connected and which becomes its parent."},{"location":"reference/TreeSitterHighlighter/#treesitterhighlighter_2","title":"~TreeSitterHighlighter","text":"<p>~TreeSitterHighlighter()</p> <pre><code>Destructor. Disconnects the syntax highlighter from its document.\n</code></pre>"},{"location":"reference/TreeSitterHighlighter/#set_document","title":"set_document","text":"<p>void set_document(QTextDocument* document)</p> <pre><code>Connects the syntax highlighter to the given [QTextDocument](https://doc.qt.io/qt-6/qtextdocument.html). This will disconnect it from the previous document.\n</code></pre> <code>document</code> The QTextDocument document to connect to."},{"location":"reference/TreeSitterHighlighter/#get_document","title":"get_document","text":"<p>const QTextDocument* get_document()</p> <pre><code>Return the [QTextDocument](https://doc.qt.io/qt-6/qtextdocument.html) to which this syntax highlighter is connected.\n</code></pre> Return The highlighters document."},{"location":"reference/TreeSitterHighlighter/#set_query","title":"set_query","text":"<p>bool set_query(std::string query_string)</p> <pre><code>Set the query from a [query pattern string](https://tree-sitter.github.io/tree-sitter/using-parsers#query-syntax) to use for syntax highlighting.\n</code></pre> <code>query_string</code> A highlighting query string. Return Indicates if the query could be created successfully."},{"location":"reference/TreeSitterHighlighter/#set_format_map","title":"set_format_map","text":"<p>void set_format_map(FormatMap format_map)</p> <pre><code>Set the format map.\n</code></pre> <code>format_map</code> A map of capture names to their desired QTextCharFormat format."},{"location":"reference/TreeSitterHighlighter/#get_format_map","title":"get_format_map","text":"<p>const FormatMap get_format_map()</p> <pre><code>Return the highlighters format map.\n</code></pre> Return The highlighters frmat map."},{"location":"reference/TreeSitterHighlighter/#reparse","title":"reparse","text":"<p>void reparse()</p> <pre><code>Reparse the whole document.\n</code></pre>"},{"location":"reference/TreeSitterHighlighter/#rehighlight","title":"rehighlight","text":"<p>void rehighlight()</p> <pre><code>Apply syntax highlighting to the whole document.\n</code></pre>"},{"location":"reference/TreeSitterHighlighter/#clear","title":"clear","text":"<p>void clear()</p> <pre><code>Clear the highlighting of the whole document.\n</code></pre>"}]}